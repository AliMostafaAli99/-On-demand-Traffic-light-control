
Traffic light control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000059e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000612  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  00000612  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000612  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000644  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000102d  00000000  00000000  00000798  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000085b  00000000  00000000  000017c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a73  00000000  00000000  00002020  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001cc  00000000  00000000  00002a94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000595  00000000  00000000  00002c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000079d  00000000  00000000  000031f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00003992  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 36       	cpi	r26, 0x65	; 101
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 73 01 	call	0x2e6	; 0x2e6 <main>
  74:	0c 94 cd 02 	jmp	0x59a	; 0x59a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <app_init>:
// function definitions

void app_init(void)
{
	// initialize Cars' LEDs
	LED_init(Cars_green_LED_port,Cars_green_LED_pin);
  7c:	60 e0       	ldi	r22, 0x00	; 0
  7e:	81 e4       	ldi	r24, 0x41	; 65
  80:	0e 94 16 01 	call	0x22c	; 0x22c <LED_init>
	LED_init(Cars_yellow_LED_port,Cars_yellow_LED_pin);
  84:	61 e0       	ldi	r22, 0x01	; 1
  86:	81 e4       	ldi	r24, 0x41	; 65
  88:	0e 94 16 01 	call	0x22c	; 0x22c <LED_init>
	LED_init(Cars_red_LED_port,Cars_red_LED_pin);
  8c:	62 e0       	ldi	r22, 0x02	; 2
  8e:	81 e4       	ldi	r24, 0x41	; 65
  90:	0e 94 16 01 	call	0x22c	; 0x22c <LED_init>
	
	// initialize Pedestrian's LEDs
	LED_init(Pedestrian_green_LED_port,Pedestrian_green_LED_pin);
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	82 e4       	ldi	r24, 0x42	; 66
  98:	0e 94 16 01 	call	0x22c	; 0x22c <LED_init>
	LED_init(Pedestrian_yellow_LED_port,Pedestrian_yellow_LED_pin);
  9c:	61 e0       	ldi	r22, 0x01	; 1
  9e:	82 e4       	ldi	r24, 0x42	; 66
  a0:	0e 94 16 01 	call	0x22c	; 0x22c <LED_init>
	LED_init(Pedestrian_red_LED_port,Pedestrian_red_LED_pin);
  a4:	62 e0       	ldi	r22, 0x02	; 2
  a6:	82 e4       	ldi	r24, 0x42	; 66
  a8:	0e 94 16 01 	call	0x22c	; 0x22c <LED_init>
	
	// initialize Pedestrian's button
	button_init(Pedestrian_button_port,Pedestrian_button_pin);
  ac:	62 e0       	ldi	r22, 0x02	; 2
  ae:	84 e4       	ldi	r24, 0x44	; 68
  b0:	0e 94 12 01 	call	0x224	; 0x224 <button_init>
	
	// initialize timer
	timer0_init();
  b4:	0e 94 9e 02 	call	0x53c	; 0x53c <timer0_init>
	
	
	/* Enable Global Interrupt, Set the I-bit in status register to 1 */
	sei();
  b8:	78 94       	sei
	/*choose the external Interrupt sense - sense on rising edge */
	MCUCR |= (1<<0) | (1<<1);
  ba:	85 b7       	in	r24, 0x35	; 53
  bc:	83 60       	ori	r24, 0x03	; 3
  be:	85 bf       	out	0x35, r24	; 53
	/* Enable external Interrupt 0 - INT0 */
	GICR |= (1<<6);
  c0:	8b b7       	in	r24, 0x3b	; 59
  c2:	80 64       	ori	r24, 0x40	; 64
  c4:	8b bf       	out	0x3b, r24	; 59
  c6:	08 95       	ret

000000c8 <app_start>:
	
	while (1)
	{
		// all logic repetitive
		
		switch (Pedestrian_mode)
  c8:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <Pedestrian_mode>
  cc:	88 23       	and	r24, r24
  ce:	19 f0       	breq	.+6      	; 0xd6 <app_start+0xe>
  d0:	81 30       	cpi	r24, 0x01	; 1
  d2:	d9 f1       	breq	.+118    	; 0x14a <app_start+0x82>
  d4:	f9 cf       	rjmp	.-14     	; 0xc8 <app_start>
		{
		case OFF:
		
		// turn on  Cars' Green LED
		LED_ON(Cars_green_LED_port,Cars_green_LED_pin);
  d6:	60 e0       	ldi	r22, 0x00	; 0
  d8:	81 e4       	ldi	r24, 0x41	; 65
  da:	0e 94 1a 01 	call	0x234	; 0x234 <LED_ON>
		CAR_Green_LED_STate = ON;
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		
		//delay_5_sec
		delay_5_sec();
  e4:	0e 94 b5 02 	call	0x56a	; 0x56a <delay_5_sec>
		
		// Prevent execution of the rest of "case off) in the switch function
		if(Pedestrian_mode == ON) break;
  e8:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <Pedestrian_mode>
  ec:	81 30       	cpi	r24, 0x01	; 1
  ee:	61 f3       	breq	.-40     	; 0xc8 <app_start>
		
		//turn off Cars' Green LED
		LED_OFF(Cars_green_LED_port,Cars_green_LED_pin);
  f0:	60 e0       	ldi	r22, 0x00	; 0
  f2:	81 e4       	ldi	r24, 0x41	; 65
  f4:	0e 94 1e 01 	call	0x23c	; 0x23c <LED_OFF>
		CAR_Green_LED_STate = OFF;
  f8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		
		// blink Cars' yellow LED 5 sec
		CAR_yello_LED_STate = ON;
  fc:	c1 e0       	ldi	r28, 0x01	; 1
  fe:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <CAR_yello_LED_STate>
		LED_blink_for_N_sec(Cars_yellow_LED_port,Cars_yellow_LED_pin,5);
 102:	45 e0       	ldi	r20, 0x05	; 5
 104:	61 e0       	ldi	r22, 0x01	; 1
 106:	81 e4       	ldi	r24, 0x41	; 65
 108:	0e 94 22 01 	call	0x244	; 0x244 <LED_blink_for_N_sec>
		CAR_yello_LED_STate = OFF;
 10c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <CAR_yello_LED_STate>
		
		// turn on  Cars' REd LED
		LED_ON(Cars_red_LED_port,Cars_red_LED_pin);
 110:	62 e0       	ldi	r22, 0x02	; 2
 112:	81 e4       	ldi	r24, 0x41	; 65
 114:	0e 94 1a 01 	call	0x234	; 0x234 <LED_ON>
		CAR_Red_LED_STate = ON;
 118:	c0 93 62 00 	sts	0x0062, r28	; 0x800062 <CAR_Red_LED_STate>
		
		//delay_5_sec
		delay_5_sec();
 11c:	0e 94 b5 02 	call	0x56a	; 0x56a <delay_5_sec>
		
		// Prevent execution of the rest of "case off) in the switch function
		if(Pedestrian_mode == ON) break;
 120:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <Pedestrian_mode>
 124:	81 30       	cpi	r24, 0x01	; 1
 126:	81 f2       	breq	.-96     	; 0xc8 <app_start>
		
		//turn off Cars' REd LED
		LED_OFF(Cars_red_LED_port,Cars_red_LED_pin);
 128:	62 e0       	ldi	r22, 0x02	; 2
 12a:	81 e4       	ldi	r24, 0x41	; 65
 12c:	0e 94 1e 01 	call	0x23c	; 0x23c <LED_OFF>
		CAR_Red_LED_STate = OFF;
 130:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <CAR_Red_LED_STate>
		
		// blink Cars' yellow LED 5 sec
		CAR_yello_LED_STate = ON;
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <CAR_yello_LED_STate>
		LED_blink_for_N_sec(Cars_yellow_LED_port,Cars_yellow_LED_pin,5);
 13a:	45 e0       	ldi	r20, 0x05	; 5
 13c:	61 e0       	ldi	r22, 0x01	; 1
 13e:	81 e4       	ldi	r24, 0x41	; 65
 140:	0e 94 22 01 	call	0x244	; 0x244 <LED_blink_for_N_sec>
		CAR_yello_LED_STate = OFF;
 144:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <CAR_yello_LED_STate>
		
		break;
 148:	bf cf       	rjmp	.-130    	; 0xc8 <app_start>
		
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
		case ON :
			
		// change the state of pedestrian mode to off because the delay functions have instruction (break;) wheen Pedestrian_mode = ON
		Pedestrian_mode = OFF ;
 14a:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <Pedestrian_mode>
		
		
			
		if (Car_LEDs_state_While_pressed == CAR_GREEN_ON_OR_Car_Yellow_Blink)
 14e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Car_LEDs_state_While_pressed>
 152:	81 30       	cpi	r24, 0x01	; 1
 154:	e1 f4       	brne	.+56     	; 0x18e <app_start+0xc6>
		{
			// Turn ON Pedestrian Red LED and Both yellow LED blink for 5 sec
			LED_ON(Pedestrian_red_LED_port,Pedestrian_red_LED_pin);
 156:	62 e0       	ldi	r22, 0x02	; 2
 158:	82 e4       	ldi	r24, 0x42	; 66
 15a:	0e 94 1a 01 	call	0x234	; 0x234 <LED_ON>
			LED_both_blink_for_N_sec(Pedestrian_yellow_LED_port,Pedestrian_yellow_LED_pin,5,Cars_yellow_LED_port,Cars_yellow_LED_pin);
 15e:	01 e0       	ldi	r16, 0x01	; 1
 160:	21 e4       	ldi	r18, 0x41	; 65
 162:	45 e0       	ldi	r20, 0x05	; 5
 164:	61 e0       	ldi	r22, 0x01	; 1
 166:	82 e4       	ldi	r24, 0x42	; 66
 168:	0e 94 45 01 	call	0x28a	; 0x28a <LED_both_blink_for_N_sec>
				
			// Turn OFF: Pedestrian Red LED & Car Green LED
			// Turn ON : Pedestrian Green LED & Car RED LED
			LED_OFF(Pedestrian_red_LED_port,Pedestrian_red_LED_pin);
 16c:	62 e0       	ldi	r22, 0x02	; 2
 16e:	82 e4       	ldi	r24, 0x42	; 66
 170:	0e 94 1e 01 	call	0x23c	; 0x23c <LED_OFF>
			LED_OFF(Cars_green_LED_port,Cars_green_LED_pin);
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	81 e4       	ldi	r24, 0x41	; 65
 178:	0e 94 1e 01 	call	0x23c	; 0x23c <LED_OFF>
			LED_ON(Pedestrian_green_LED_port,Pedestrian_green_LED_pin);
 17c:	60 e0       	ldi	r22, 0x00	; 0
 17e:	82 e4       	ldi	r24, 0x42	; 66
 180:	0e 94 1a 01 	call	0x234	; 0x234 <LED_ON>
			LED_ON(Cars_red_LED_port,Cars_red_LED_pin);
 184:	62 e0       	ldi	r22, 0x02	; 2
 186:	81 e4       	ldi	r24, 0x41	; 65
 188:	0e 94 1a 01 	call	0x234	; 0x234 <LED_ON>
 18c:	06 c0       	rjmp	.+12     	; 0x19a <app_start+0xd2>
		}
			
		else if(Car_LEDs_state_While_pressed == Car_RED_ON)
 18e:	81 11       	cpse	r24, r1
 190:	04 c0       	rjmp	.+8      	; 0x19a <app_start+0xd2>
		{
			// Turn ON : Pedestrian Green LED & Car RED LED remains ON
			LED_ON(Pedestrian_green_LED_port,Pedestrian_green_LED_pin);
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	82 e4       	ldi	r24, 0x42	; 66
 196:	0e 94 1a 01 	call	0x234	; 0x234 <LED_ON>
		}
			
			
		//delay_5_sec
		delay_5_sec();
 19a:	0e 94 b5 02 	call	0x56a	; 0x56a <delay_5_sec>
			
		// Turn OFF Car RED LED 
		// Pedestrian Green LED still on and blink both yellow LED for 5 sec
		LED_OFF(Cars_red_LED_port,Cars_red_LED_pin);
 19e:	62 e0       	ldi	r22, 0x02	; 2
 1a0:	81 e4       	ldi	r24, 0x41	; 65
 1a2:	0e 94 1e 01 	call	0x23c	; 0x23c <LED_OFF>
		LED_ON(Pedestrian_green_LED_port,Pedestrian_green_LED_pin);
 1a6:	60 e0       	ldi	r22, 0x00	; 0
 1a8:	82 e4       	ldi	r24, 0x42	; 66
 1aa:	0e 94 1a 01 	call	0x234	; 0x234 <LED_ON>
		LED_both_blink_for_N_sec(Pedestrian_yellow_LED_port,Pedestrian_yellow_LED_pin,5,Cars_yellow_LED_port,Cars_yellow_LED_pin);
 1ae:	01 e0       	ldi	r16, 0x01	; 1
 1b0:	21 e4       	ldi	r18, 0x41	; 65
 1b2:	45 e0       	ldi	r20, 0x05	; 5
 1b4:	61 e0       	ldi	r22, 0x01	; 1
 1b6:	82 e4       	ldi	r24, 0x42	; 66
 1b8:	0e 94 45 01 	call	0x28a	; 0x28a <LED_both_blink_for_N_sec>
			
			
			
		//turn off : Pedestrian's  Green LED & Both red LEDs 
		LED_OFF(Pedestrian_green_LED_port,Pedestrian_green_LED_pin);
 1bc:	60 e0       	ldi	r22, 0x00	; 0
 1be:	82 e4       	ldi	r24, 0x42	; 66
 1c0:	0e 94 1e 01 	call	0x23c	; 0x23c <LED_OFF>
		LED_OFF(Cars_red_LED_port,Cars_red_LED_pin);
 1c4:	62 e0       	ldi	r22, 0x02	; 2
 1c6:	81 e4       	ldi	r24, 0x41	; 65
 1c8:	0e 94 1e 01 	call	0x23c	; 0x23c <LED_OFF>
		LED_OFF(Pedestrian_red_LED_port,Pedestrian_red_LED_pin);
 1cc:	62 e0       	ldi	r22, 0x02	; 2
 1ce:	82 e4       	ldi	r24, 0x42	; 66
 1d0:	0e 94 1e 01 	call	0x23c	; 0x23c <LED_OFF>
			
		// turn on  Cars' Green LED
		LED_ON(Cars_green_LED_port,Cars_green_LED_pin);
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	81 e4       	ldi	r24, 0x41	; 65
 1d8:	0e 94 1a 01 	call	0x234	; 0x234 <LED_ON>
			
		// change the state of pedestrian mode to off 
		Pedestrian_mode = OFF ;
 1dc:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <Pedestrian_mode>
			
		break;
 1e0:	73 cf       	rjmp	.-282    	; 0xc8 <app_start>

000001e2 <__vector_1>:
		
	}
}

ISR(EXT_INT_0)
{
 1e2:	1f 92       	push	r1
 1e4:	0f 92       	push	r0
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	0f 92       	push	r0
 1ea:	11 24       	eor	r1, r1
 1ec:	8f 93       	push	r24
	
	// change the state of pedestrian mode to ON
	Pedestrian_mode = ON ;
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <Pedestrian_mode>
	
	// check in which state the pedestrian button pressed
	if (CAR_Green_LED_STate== ON|| CAR_yello_LED_STate == ON)
 1f4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1f8:	81 30       	cpi	r24, 0x01	; 1
 1fa:	21 f0       	breq	.+8      	; 0x204 <__vector_1+0x22>
 1fc:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <CAR_yello_LED_STate>
 200:	81 30       	cpi	r24, 0x01	; 1
 202:	21 f4       	brne	.+8      	; 0x20c <__vector_1+0x2a>
	{
		
		Car_LEDs_state_While_pressed = CAR_GREEN_ON_OR_Car_Yellow_Blink;
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Car_LEDs_state_While_pressed>
 20a:	06 c0       	rjmp	.+12     	; 0x218 <__vector_1+0x36>
		
		
	}
	else if (CAR_Red_LED_STate == ON )
 20c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <CAR_Red_LED_STate>
 210:	81 30       	cpi	r24, 0x01	; 1
 212:	11 f4       	brne	.+4      	; 0x218 <__vector_1+0x36>
	{
		Car_LEDs_state_While_pressed = Car_RED_ON;
 214:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <Car_LEDs_state_While_pressed>
		
	}
 218:	8f 91       	pop	r24
 21a:	0f 90       	pop	r0
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	0f 90       	pop	r0
 220:	1f 90       	pop	r1
 222:	18 95       	reti

00000224 <button_init>:

// function definitions

void button_init(uint8_t buttonPort,uint8_t buttonPin)
{
	DIO_init(buttonPort,buttonPin,INPUT); //button is an input device
 224:	40 e0       	ldi	r20, 0x00	; 0
 226:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <DIO_init>
 22a:	08 95       	ret

0000022c <LED_init>:
// function definitions


void LED_init(uint8_t ledPort,uint8_t ledPin)
{
	DIO_init(ledPort,ledPin,OUTPUT);
 22c:	41 e0       	ldi	r20, 0x01	; 1
 22e:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <DIO_init>
 232:	08 95       	ret

00000234 <LED_ON>:
}

void LED_ON(uint8_t ledPort,uint8_t ledPin)
{
	DIO_write(ledPort,ledPin,HIGH);
 234:	41 e0       	ldi	r20, 0x01	; 1
 236:	0e 94 0c 02 	call	0x418	; 0x418 <DIO_write>
 23a:	08 95       	ret

0000023c <LED_OFF>:
}

void LED_OFF(uint8_t ledPort,uint8_t ledPin)
{
	DIO_write(ledPort,ledPin,LOW);
 23c:	40 e0       	ldi	r20, 0x00	; 0
 23e:	0e 94 0c 02 	call	0x418	; 0x418 <DIO_write>
 242:	08 95       	ret

00000244 <LED_blink_for_N_sec>:
}

void LED_blink_for_N_sec(uint8_t ledPort,uint8_t ledPin,uint8_t numberOfSecond)
{
 244:	0f 93       	push	r16
 246:	1f 93       	push	r17
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
 24c:	18 2f       	mov	r17, r24
 24e:	d6 2f       	mov	r29, r22
 250:	04 2f       	mov	r16, r20
	uint8_t counter = 0 ;
 252:	c0 e0       	ldi	r28, 0x00	; 0
	while (counter < numberOfSecond)
 254:	13 c0       	rjmp	.+38     	; 0x27c <LED_blink_for_N_sec+0x38>
	{
		// LED ON
		DIO_write(ledPort,ledPin,HIGH);
 256:	41 e0       	ldi	r20, 0x01	; 1
 258:	6d 2f       	mov	r22, r29
 25a:	81 2f       	mov	r24, r17
 25c:	0e 94 0c 02 	call	0x418	; 0x418 <DIO_write>
		
		// delay for blink
		delay500ms();
 260:	0e 94 a1 02 	call	0x542	; 0x542 <delay500ms>
		
		// LED OFF
		DIO_write(ledPort,ledPin,LOW);
 264:	40 e0       	ldi	r20, 0x00	; 0
 266:	6d 2f       	mov	r22, r29
 268:	81 2f       	mov	r24, r17
 26a:	0e 94 0c 02 	call	0x418	; 0x418 <DIO_write>
		
		// delay for blink
		delay500ms();
 26e:	0e 94 a1 02 	call	0x542	; 0x542 <delay500ms>
		
		// one loop equal 1 sec
		
		if (Pedestrian_mode== 1) {break;}
 272:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <Pedestrian_mode>
 276:	81 30       	cpi	r24, 0x01	; 1
 278:	19 f0       	breq	.+6      	; 0x280 <LED_blink_for_N_sec+0x3c>
		
		counter++;
 27a:	cf 5f       	subi	r28, 0xFF	; 255
}

void LED_blink_for_N_sec(uint8_t ledPort,uint8_t ledPin,uint8_t numberOfSecond)
{
	uint8_t counter = 0 ;
	while (counter < numberOfSecond)
 27c:	c0 17       	cp	r28, r16
 27e:	58 f3       	brcs	.-42     	; 0x256 <LED_blink_for_N_sec+0x12>
		
		if (Pedestrian_mode== 1) {break;}
		
		counter++;
	}
}
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	1f 91       	pop	r17
 286:	0f 91       	pop	r16
 288:	08 95       	ret

0000028a <LED_both_blink_for_N_sec>:
void LED_both_blink_for_N_sec(uint8_t ledPort,uint8_t ledPin,uint8_t numberOfSecond,uint8_t ledPort2,uint8_t ledPin2)
{
 28a:	ef 92       	push	r14
 28c:	ff 92       	push	r15
 28e:	0f 93       	push	r16
 290:	1f 93       	push	r17
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
 296:	f8 2e       	mov	r15, r24
 298:	16 2f       	mov	r17, r22
 29a:	e4 2e       	mov	r14, r20
 29c:	d2 2f       	mov	r29, r18
	uint8_t counter = 0 ;
 29e:	c0 e0       	ldi	r28, 0x00	; 0
	while (counter < numberOfSecond)
 2a0:	19 c0       	rjmp	.+50     	; 0x2d4 <LED_both_blink_for_N_sec+0x4a>
	{
		// Both LED ON
		DIO_write(ledPort,ledPin,HIGH);
 2a2:	41 e0       	ldi	r20, 0x01	; 1
 2a4:	61 2f       	mov	r22, r17
 2a6:	8f 2d       	mov	r24, r15
 2a8:	0e 94 0c 02 	call	0x418	; 0x418 <DIO_write>
		DIO_write(ledPort2,ledPin2,HIGH);
 2ac:	41 e0       	ldi	r20, 0x01	; 1
 2ae:	60 2f       	mov	r22, r16
 2b0:	8d 2f       	mov	r24, r29
 2b2:	0e 94 0c 02 	call	0x418	; 0x418 <DIO_write>
		
		// delay for blink
		delay500ms();
 2b6:	0e 94 a1 02 	call	0x542	; 0x542 <delay500ms>
		
		// Both LED OFF
		DIO_write(ledPort,ledPin,LOW);
 2ba:	40 e0       	ldi	r20, 0x00	; 0
 2bc:	61 2f       	mov	r22, r17
 2be:	8f 2d       	mov	r24, r15
 2c0:	0e 94 0c 02 	call	0x418	; 0x418 <DIO_write>
		DIO_write(ledPort2,ledPin2,LOW);
 2c4:	40 e0       	ldi	r20, 0x00	; 0
 2c6:	60 2f       	mov	r22, r16
 2c8:	8d 2f       	mov	r24, r29
 2ca:	0e 94 0c 02 	call	0x418	; 0x418 <DIO_write>
		
		// delay for blink
		delay500ms();
 2ce:	0e 94 a1 02 	call	0x542	; 0x542 <delay500ms>
		
		// one loop equal 1 sec
		
		counter++;
 2d2:	cf 5f       	subi	r28, 0xFF	; 255
	}
}
void LED_both_blink_for_N_sec(uint8_t ledPort,uint8_t ledPin,uint8_t numberOfSecond,uint8_t ledPort2,uint8_t ledPin2)
{
	uint8_t counter = 0 ;
	while (counter < numberOfSecond)
 2d4:	ce 15       	cp	r28, r14
 2d6:	28 f3       	brcs	.-54     	; 0x2a2 <LED_both_blink_for_N_sec+0x18>
		
		// one loop equal 1 sec
		
		counter++;
	}
}
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	1f 91       	pop	r17
 2de:	0f 91       	pop	r16
 2e0:	ff 90       	pop	r15
 2e2:	ef 90       	pop	r14
 2e4:	08 95       	ret

000002e6 <main>:
//uint8_t Pedestrian_button_state = LOW ;

int main(void)
{
   
    app_init();
 2e6:	0e 94 3e 00 	call	0x7c	; 0x7c <app_init>
	app_start();
 2ea:	0e 94 64 00 	call	0xc8	; 0xc8 <app_start>
	 //LED_ON(PORT_D,0); //LED_ON
	 //LED_OFF(PORT_D,0); //LED_OFF
	 //LED_blink_for_N_sec(PORT_D,0,2); //LED_blink
	////return 0 ;

}
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	08 95       	ret

000002f4 <DIO_init>:

// function definitions
EN_DIO_error_t DIO_init(uint8_t portNumber,uint8_t pinNumber, uint8_t direction)
{
	//error handling
	if (pinNumber <0 || pinNumber >7) return DIO_WRONG_PIN_NUMBER ;
 2f4:	68 30       	cpi	r22, 0x08	; 8
 2f6:	08 f0       	brcs	.+2      	; 0x2fa <DIO_init+0x6>
 2f8:	83 c0       	rjmp	.+262    	; 0x400 <__EEPROM_REGION_LENGTH__>
	

	switch(portNumber)
 2fa:	82 34       	cpi	r24, 0x42	; 66
 2fc:	49 f1       	breq	.+82     	; 0x350 <DIO_init+0x5c>
 2fe:	18 f4       	brcc	.+6      	; 0x306 <DIO_init+0x12>
 300:	81 34       	cpi	r24, 0x41	; 65
 302:	41 f0       	breq	.+16     	; 0x314 <DIO_init+0x20>
 304:	7f c0       	rjmp	.+254    	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 306:	83 34       	cpi	r24, 0x43	; 67
 308:	09 f4       	brne	.+2      	; 0x30c <DIO_init+0x18>
 30a:	40 c0       	rjmp	.+128    	; 0x38c <DIO_init+0x98>
 30c:	84 34       	cpi	r24, 0x44	; 68
 30e:	09 f4       	brne	.+2      	; 0x312 <DIO_init+0x1e>
 310:	5a c0       	rjmp	.+180    	; 0x3c6 <DIO_init+0xd2>
 312:	78 c0       	rjmp	.+240    	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
	{
		case PORT_A:
		if (direction==INPUT)
 314:	41 11       	cpse	r20, r1
 316:	0d c0       	rjmp	.+26     	; 0x332 <DIO_init+0x3e>
		{
			DDRA &= ~ (1<<pinNumber); //clear
 318:	2a b3       	in	r18, 0x1a	; 26
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	02 c0       	rjmp	.+4      	; 0x324 <DIO_init+0x30>
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	6a 95       	dec	r22
 326:	e2 f7       	brpl	.-8      	; 0x320 <DIO_init+0x2c>
 328:	80 95       	com	r24
 32a:	82 23       	and	r24, r18
 32c:	8a bb       	out	0x1a, r24	; 26
		default: //error handling
		return DIO_WRONG_PORT_NUMBER;
		break;
		
	}
	return DIO_OK;
 32e:	84 e0       	ldi	r24, 0x04	; 4
 330:	08 95       	ret
		case PORT_A:
		if (direction==INPUT)
		{
			DDRA &= ~ (1<<pinNumber); //clear
		}
		else if (direction==OUTPUT)
 332:	41 30       	cpi	r20, 0x01	; 1
 334:	09 f0       	breq	.+2      	; 0x338 <DIO_init+0x44>
 336:	68 c0       	rjmp	.+208    	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
		{
			DDRA |=  (1<<pinNumber); //set
 338:	2a b3       	in	r18, 0x1a	; 26
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_init+0x50>
 340:	88 0f       	add	r24, r24
 342:	99 1f       	adc	r25, r25
 344:	6a 95       	dec	r22
 346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_init+0x4c>
 348:	82 2b       	or	r24, r18
 34a:	8a bb       	out	0x1a, r24	; 26
		default: //error handling
		return DIO_WRONG_PORT_NUMBER;
		break;
		
	}
	return DIO_OK;
 34c:	84 e0       	ldi	r24, 0x04	; 4
 34e:	08 95       	ret
			return DIO_WRONG_DIRECTION ;
		}
		break;
		
		case PORT_B:
		if (direction==INPUT)
 350:	41 11       	cpse	r20, r1
 352:	0d c0       	rjmp	.+26     	; 0x36e <DIO_init+0x7a>
		{
			DDRB &= ~ (1<<pinNumber);
 354:	27 b3       	in	r18, 0x17	; 23
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	02 c0       	rjmp	.+4      	; 0x360 <DIO_init+0x6c>
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	6a 95       	dec	r22
 362:	e2 f7       	brpl	.-8      	; 0x35c <DIO_init+0x68>
 364:	80 95       	com	r24
 366:	82 23       	and	r24, r18
 368:	87 bb       	out	0x17, r24	; 23
		default: //error handling
		return DIO_WRONG_PORT_NUMBER;
		break;
		
	}
	return DIO_OK;
 36a:	84 e0       	ldi	r24, 0x04	; 4
 36c:	08 95       	ret
		case PORT_B:
		if (direction==INPUT)
		{
			DDRB &= ~ (1<<pinNumber);
		}
		else if (direction==OUTPUT)
 36e:	41 30       	cpi	r20, 0x01	; 1
 370:	09 f0       	breq	.+2      	; 0x374 <DIO_init+0x80>
 372:	4c c0       	rjmp	.+152    	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
		{
			DDRB |=  (1<<pinNumber);
 374:	27 b3       	in	r18, 0x17	; 23
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	02 c0       	rjmp	.+4      	; 0x380 <DIO_init+0x8c>
 37c:	88 0f       	add	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	6a 95       	dec	r22
 382:	e2 f7       	brpl	.-8      	; 0x37c <DIO_init+0x88>
 384:	82 2b       	or	r24, r18
 386:	87 bb       	out	0x17, r24	; 23
		default: //error handling
		return DIO_WRONG_PORT_NUMBER;
		break;
		
	}
	return DIO_OK;
 388:	84 e0       	ldi	r24, 0x04	; 4
 38a:	08 95       	ret
			return DIO_WRONG_DIRECTION ;
		}
		break;
		
		case PORT_C:
		if (direction==INPUT)
 38c:	41 11       	cpse	r20, r1
 38e:	0d c0       	rjmp	.+26     	; 0x3aa <DIO_init+0xb6>
		{
			DDRC &= ~ (1<<pinNumber);
 390:	24 b3       	in	r18, 0x14	; 20
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	02 c0       	rjmp	.+4      	; 0x39c <DIO_init+0xa8>
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	6a 95       	dec	r22
 39e:	e2 f7       	brpl	.-8      	; 0x398 <DIO_init+0xa4>
 3a0:	80 95       	com	r24
 3a2:	82 23       	and	r24, r18
 3a4:	84 bb       	out	0x14, r24	; 20
		default: //error handling
		return DIO_WRONG_PORT_NUMBER;
		break;
		
	}
	return DIO_OK;
 3a6:	84 e0       	ldi	r24, 0x04	; 4
 3a8:	08 95       	ret
		case PORT_C:
		if (direction==INPUT)
		{
			DDRC &= ~ (1<<pinNumber);
		}
		else if (direction==OUTPUT)
 3aa:	41 30       	cpi	r20, 0x01	; 1
 3ac:	89 f5       	brne	.+98     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
		{
			DDRC |=  (1<<pinNumber);
 3ae:	24 b3       	in	r18, 0x14	; 20
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <DIO_init+0xc6>
 3b6:	88 0f       	add	r24, r24
 3b8:	99 1f       	adc	r25, r25
 3ba:	6a 95       	dec	r22
 3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <DIO_init+0xc2>
 3be:	82 2b       	or	r24, r18
 3c0:	84 bb       	out	0x14, r24	; 20
		default: //error handling
		return DIO_WRONG_PORT_NUMBER;
		break;
		
	}
	return DIO_OK;
 3c2:	84 e0       	ldi	r24, 0x04	; 4
 3c4:	08 95       	ret
			//error handling
			return DIO_WRONG_DIRECTION ;
		}
		break;
		case PORT_D:
		if (direction==INPUT)
 3c6:	41 11       	cpse	r20, r1
 3c8:	0d c0       	rjmp	.+26     	; 0x3e4 <DIO_init+0xf0>
		{
			DDRD &= ~ (1<<pinNumber);
 3ca:	21 b3       	in	r18, 0x11	; 17
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <DIO_init+0xe2>
 3d2:	88 0f       	add	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	6a 95       	dec	r22
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <DIO_init+0xde>
 3da:	80 95       	com	r24
 3dc:	82 23       	and	r24, r18
 3de:	81 bb       	out	0x11, r24	; 17
		default: //error handling
		return DIO_WRONG_PORT_NUMBER;
		break;
		
	}
	return DIO_OK;
 3e0:	84 e0       	ldi	r24, 0x04	; 4
 3e2:	08 95       	ret
		case PORT_D:
		if (direction==INPUT)
		{
			DDRD &= ~ (1<<pinNumber);
		}
		else if (direction==OUTPUT)
 3e4:	41 30       	cpi	r20, 0x01	; 1
 3e6:	b1 f4       	brne	.+44     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
		{
			DDRD |=  (1<<pinNumber);
 3e8:	21 b3       	in	r18, 0x11	; 17
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <DIO_init+0x100>
 3f0:	88 0f       	add	r24, r24
 3f2:	99 1f       	adc	r25, r25
 3f4:	6a 95       	dec	r22
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <DIO_init+0xfc>
 3f8:	82 2b       	or	r24, r18
 3fa:	81 bb       	out	0x11, r24	; 17
		default: //error handling
		return DIO_WRONG_PORT_NUMBER;
		break;
		
	}
	return DIO_OK;
 3fc:	84 e0       	ldi	r24, 0x04	; 4
 3fe:	08 95       	ret

// function definitions
EN_DIO_error_t DIO_init(uint8_t portNumber,uint8_t pinNumber, uint8_t direction)
{
	//error handling
	if (pinNumber <0 || pinNumber >7) return DIO_WRONG_PIN_NUMBER ;
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	08 95       	ret
			return DIO_WRONG_DIRECTION ;
		}
		break;
		
		default: //error handling
		return DIO_WRONG_PORT_NUMBER;
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	08 95       	ret
			DDRA |=  (1<<pinNumber); //set
		}
		else
		{
			//error handling
			return DIO_WRONG_DIRECTION ;
 408:	82 e0       	ldi	r24, 0x02	; 2
 40a:	08 95       	ret
			DDRB |=  (1<<pinNumber);
		}
		else
		{
			//error handling
			return DIO_WRONG_DIRECTION ;
 40c:	82 e0       	ldi	r24, 0x02	; 2
 40e:	08 95       	ret
			DDRC |=  (1<<pinNumber);
		}
		else
		{
			//error handling
			return DIO_WRONG_DIRECTION ;
 410:	82 e0       	ldi	r24, 0x02	; 2
 412:	08 95       	ret
			DDRD |=  (1<<pinNumber);
		}
		else
		{
			//error handling
			return DIO_WRONG_DIRECTION ;
 414:	82 e0       	ldi	r24, 0x02	; 2
		return DIO_WRONG_PORT_NUMBER;
		break;
		
	}
	return DIO_OK;
}
 416:	08 95       	ret

00000418 <DIO_write>:

EN_DIO_error_t DIO_write(uint8_t portNumber,uint8_t pinNumber,uint8_t value)
{
	//error handling
	if (pinNumber <0 || pinNumber >7) return DIO_WRONG_PIN_NUMBER ;
 418:	68 30       	cpi	r22, 0x08	; 8
 41a:	08 f0       	brcs	.+2      	; 0x41e <DIO_write+0x6>
 41c:	83 c0       	rjmp	.+262    	; 0x524 <DIO_write+0x10c>
	
	switch(portNumber)
 41e:	82 34       	cpi	r24, 0x42	; 66
 420:	49 f1       	breq	.+82     	; 0x474 <DIO_write+0x5c>
 422:	18 f4       	brcc	.+6      	; 0x42a <DIO_write+0x12>
 424:	81 34       	cpi	r24, 0x41	; 65
 426:	41 f0       	breq	.+16     	; 0x438 <DIO_write+0x20>
 428:	7f c0       	rjmp	.+254    	; 0x528 <DIO_write+0x110>
 42a:	83 34       	cpi	r24, 0x43	; 67
 42c:	09 f4       	brne	.+2      	; 0x430 <DIO_write+0x18>
 42e:	40 c0       	rjmp	.+128    	; 0x4b0 <DIO_write+0x98>
 430:	84 34       	cpi	r24, 0x44	; 68
 432:	09 f4       	brne	.+2      	; 0x436 <DIO_write+0x1e>
 434:	5a c0       	rjmp	.+180    	; 0x4ea <DIO_write+0xd2>
 436:	78 c0       	rjmp	.+240    	; 0x528 <DIO_write+0x110>
	{
		case PORT_A:
		if (value==LOW)
 438:	41 11       	cpse	r20, r1
 43a:	0d c0       	rjmp	.+26     	; 0x456 <DIO_write+0x3e>
		{
			PORTA &= ~ (1<<pinNumber);
 43c:	2b b3       	in	r18, 0x1b	; 27
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	02 c0       	rjmp	.+4      	; 0x448 <DIO_write+0x30>
 444:	88 0f       	add	r24, r24
 446:	99 1f       	adc	r25, r25
 448:	6a 95       	dec	r22
 44a:	e2 f7       	brpl	.-8      	; 0x444 <DIO_write+0x2c>
 44c:	80 95       	com	r24
 44e:	82 23       	and	r24, r18
 450:	8b bb       	out	0x1b, r24	; 27
		default: //error handling
		return DIO_WRONG_PORT_NUMBER;
		break;
		
	}
	return DIO_OK;
 452:	84 e0       	ldi	r24, 0x04	; 4
 454:	08 95       	ret
		case PORT_A:
		if (value==LOW)
		{
			PORTA &= ~ (1<<pinNumber);
		}
		else if (value==HIGH)
 456:	41 30       	cpi	r20, 0x01	; 1
 458:	09 f0       	breq	.+2      	; 0x45c <DIO_write+0x44>
 45a:	68 c0       	rjmp	.+208    	; 0x52c <DIO_write+0x114>
		{
			PORTA |=  (1<<pinNumber);
 45c:	2b b3       	in	r18, 0x1b	; 27
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	02 c0       	rjmp	.+4      	; 0x468 <DIO_write+0x50>
 464:	88 0f       	add	r24, r24
 466:	99 1f       	adc	r25, r25
 468:	6a 95       	dec	r22
 46a:	e2 f7       	brpl	.-8      	; 0x464 <DIO_write+0x4c>
 46c:	82 2b       	or	r24, r18
 46e:	8b bb       	out	0x1b, r24	; 27
		default: //error handling
		return DIO_WRONG_PORT_NUMBER;
		break;
		
	}
	return DIO_OK;
 470:	84 e0       	ldi	r24, 0x04	; 4
 472:	08 95       	ret
			return DIO_WRONG_VALUE ;
		}
		break;
		
		case PORT_B:
		if (value==LOW)
 474:	41 11       	cpse	r20, r1
 476:	0d c0       	rjmp	.+26     	; 0x492 <DIO_write+0x7a>
		{
			PORTB &= ~ (1<<pinNumber);
 478:	28 b3       	in	r18, 0x18	; 24
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	02 c0       	rjmp	.+4      	; 0x484 <DIO_write+0x6c>
 480:	88 0f       	add	r24, r24
 482:	99 1f       	adc	r25, r25
 484:	6a 95       	dec	r22
 486:	e2 f7       	brpl	.-8      	; 0x480 <DIO_write+0x68>
 488:	80 95       	com	r24
 48a:	82 23       	and	r24, r18
 48c:	88 bb       	out	0x18, r24	; 24
		default: //error handling
		return DIO_WRONG_PORT_NUMBER;
		break;
		
	}
	return DIO_OK;
 48e:	84 e0       	ldi	r24, 0x04	; 4
 490:	08 95       	ret
		case PORT_B:
		if (value==LOW)
		{
			PORTB &= ~ (1<<pinNumber);
		}
		else if (value==HIGH)
 492:	41 30       	cpi	r20, 0x01	; 1
 494:	09 f0       	breq	.+2      	; 0x498 <DIO_write+0x80>
 496:	4c c0       	rjmp	.+152    	; 0x530 <DIO_write+0x118>
		{
			PORTB |=  (1<<pinNumber);
 498:	28 b3       	in	r18, 0x18	; 24
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <DIO_write+0x8c>
 4a0:	88 0f       	add	r24, r24
 4a2:	99 1f       	adc	r25, r25
 4a4:	6a 95       	dec	r22
 4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <DIO_write+0x88>
 4a8:	82 2b       	or	r24, r18
 4aa:	88 bb       	out	0x18, r24	; 24
		default: //error handling
		return DIO_WRONG_PORT_NUMBER;
		break;
		
	}
	return DIO_OK;
 4ac:	84 e0       	ldi	r24, 0x04	; 4
 4ae:	08 95       	ret
			return DIO_WRONG_VALUE ;
		}
		break;
		
		case PORT_C:
		if (value==LOW)
 4b0:	41 11       	cpse	r20, r1
 4b2:	0d c0       	rjmp	.+26     	; 0x4ce <DIO_write+0xb6>
		{
			PORTC &= ~ (1<<pinNumber);
 4b4:	25 b3       	in	r18, 0x15	; 21
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <DIO_write+0xa8>
 4bc:	88 0f       	add	r24, r24
 4be:	99 1f       	adc	r25, r25
 4c0:	6a 95       	dec	r22
 4c2:	e2 f7       	brpl	.-8      	; 0x4bc <DIO_write+0xa4>
 4c4:	80 95       	com	r24
 4c6:	82 23       	and	r24, r18
 4c8:	85 bb       	out	0x15, r24	; 21
		default: //error handling
		return DIO_WRONG_PORT_NUMBER;
		break;
		
	}
	return DIO_OK;
 4ca:	84 e0       	ldi	r24, 0x04	; 4
 4cc:	08 95       	ret
		case PORT_C:
		if (value==LOW)
		{
			PORTC &= ~ (1<<pinNumber);
		}
		else if (value==HIGH)
 4ce:	41 30       	cpi	r20, 0x01	; 1
 4d0:	89 f5       	brne	.+98     	; 0x534 <DIO_write+0x11c>
		{
			PORTC |=  (1<<pinNumber);
 4d2:	25 b3       	in	r18, 0x15	; 21
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <DIO_write+0xc6>
 4da:	88 0f       	add	r24, r24
 4dc:	99 1f       	adc	r25, r25
 4de:	6a 95       	dec	r22
 4e0:	e2 f7       	brpl	.-8      	; 0x4da <DIO_write+0xc2>
 4e2:	82 2b       	or	r24, r18
 4e4:	85 bb       	out	0x15, r24	; 21
		default: //error handling
		return DIO_WRONG_PORT_NUMBER;
		break;
		
	}
	return DIO_OK;
 4e6:	84 e0       	ldi	r24, 0x04	; 4
 4e8:	08 95       	ret
			return DIO_WRONG_VALUE ;
			
		}
		break;
		case PORT_D:
		if (value==LOW)
 4ea:	41 11       	cpse	r20, r1
 4ec:	0d c0       	rjmp	.+26     	; 0x508 <DIO_write+0xf0>
		{
			PORTD &= ~ (1<<pinNumber);
 4ee:	22 b3       	in	r18, 0x12	; 18
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	02 c0       	rjmp	.+4      	; 0x4fa <DIO_write+0xe2>
 4f6:	88 0f       	add	r24, r24
 4f8:	99 1f       	adc	r25, r25
 4fa:	6a 95       	dec	r22
 4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <DIO_write+0xde>
 4fe:	80 95       	com	r24
 500:	82 23       	and	r24, r18
 502:	82 bb       	out	0x12, r24	; 18
		default: //error handling
		return DIO_WRONG_PORT_NUMBER;
		break;
		
	}
	return DIO_OK;
 504:	84 e0       	ldi	r24, 0x04	; 4
 506:	08 95       	ret
		case PORT_D:
		if (value==LOW)
		{
			PORTD &= ~ (1<<pinNumber);
		}
		else if (value==HIGH)
 508:	41 30       	cpi	r20, 0x01	; 1
 50a:	b1 f4       	brne	.+44     	; 0x538 <DIO_write+0x120>
		{
			PORTD |=  (1<<pinNumber);
 50c:	22 b3       	in	r18, 0x12	; 18
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	02 c0       	rjmp	.+4      	; 0x518 <DIO_write+0x100>
 514:	88 0f       	add	r24, r24
 516:	99 1f       	adc	r25, r25
 518:	6a 95       	dec	r22
 51a:	e2 f7       	brpl	.-8      	; 0x514 <DIO_write+0xfc>
 51c:	82 2b       	or	r24, r18
 51e:	82 bb       	out	0x12, r24	; 18
		default: //error handling
		return DIO_WRONG_PORT_NUMBER;
		break;
		
	}
	return DIO_OK;
 520:	84 e0       	ldi	r24, 0x04	; 4
 522:	08 95       	ret
}

EN_DIO_error_t DIO_write(uint8_t portNumber,uint8_t pinNumber,uint8_t value)
{
	//error handling
	if (pinNumber <0 || pinNumber >7) return DIO_WRONG_PIN_NUMBER ;
 524:	80 e0       	ldi	r24, 0x00	; 0
 526:	08 95       	ret
			return DIO_WRONG_VALUE ;
		}
		break;
		
		default: //error handling
		return DIO_WRONG_PORT_NUMBER;
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	08 95       	ret
			PORTA |=  (1<<pinNumber);
		}
		else
		{
			//error handling
			return DIO_WRONG_VALUE ;
 52c:	83 e0       	ldi	r24, 0x03	; 3
 52e:	08 95       	ret
			PORTB |=  (1<<pinNumber);
		}
		else
		{
			//error handling
			return DIO_WRONG_VALUE ;
 530:	83 e0       	ldi	r24, 0x03	; 3
 532:	08 95       	ret
			PORTC |=  (1<<pinNumber);
		}
		else
		{
			//error handling
			return DIO_WRONG_VALUE ;
 534:	83 e0       	ldi	r24, 0x03	; 3
 536:	08 95       	ret
			PORTD |=  (1<<pinNumber);
		}
		else
		{
			//error handling
			return DIO_WRONG_VALUE ;
 538:	83 e0       	ldi	r24, 0x03	; 3
		return DIO_WRONG_PORT_NUMBER;
		break;
		
	}
	return DIO_OK;
}
 53a:	08 95       	ret

0000053c <timer0_init>:

// function definitions
void timer0_init(void)
{
	//choose timer mode
	TCCR0 = 0x00;  // normal mode
 53c:	13 be       	out	0x33, r1	; 51
	
	// timer set initial value
	TCNT0 =0x00; 
 53e:	12 be       	out	0x32, r1	; 50
 540:	08 95       	ret

00000542 <delay500ms>:

void delay500ms (void)
{
	// timer start -> setting the clock sorce
	
	TCCR0 |= (1<<0);  // clkI/O/(No prescaling)
 542:	83 b7       	in	r24, 0x33	; 51
 544:	81 60       	ori	r24, 0x01	; 1
 546:	83 bf       	out	0x33, r24	; 51
	
	unsigned int overflowCounter = 0 ;
 548:	20 e0       	ldi	r18, 0x00	; 0
 54a:	30 e0       	ldi	r19, 0x00	; 0
	
	while (overflowCounter<2000)
 54c:	08 c0       	rjmp	.+16     	; 0x55e <delay500ms+0x1c>
	{
		// will be repeated 2000 times
		
		//wait until the overflow flag to be set 
		while ((TIFR & (1<<0)) == 0 );
 54e:	08 b6       	in	r0, 0x38	; 56
 550:	00 fe       	sbrs	r0, 0
 552:	fd cf       	rjmp	.-6      	; 0x54e <delay500ms+0xc>
		
		//clear the overflow flag
		TIFR |=  (1<<0);
 554:	88 b7       	in	r24, 0x38	; 56
 556:	81 60       	ori	r24, 0x01	; 1
 558:	88 bf       	out	0x38, r24	; 56
		
		
		
		overflowCounter++;
 55a:	2f 5f       	subi	r18, 0xFF	; 255
 55c:	3f 4f       	sbci	r19, 0xFF	; 255
	
	TCCR0 |= (1<<0);  // clkI/O/(No prescaling)
	
	unsigned int overflowCounter = 0 ;
	
	while (overflowCounter<2000)
 55e:	20 3d       	cpi	r18, 0xD0	; 208
 560:	87 e0       	ldi	r24, 0x07	; 7
 562:	38 07       	cpc	r19, r24
 564:	a0 f3       	brcs	.-24     	; 0x54e <delay500ms+0xc>
		
		overflowCounter++;
	}
	
	//timer stop
	TCCR0 = 0x00;
 566:	13 be       	out	0x33, r1	; 51
 568:	08 95       	ret

0000056a <delay_5_sec>:

void delay_5_sec (void)
{
	// timer start -> setting the clock sorce
	
	TCCR0 |= (1<<0);  // clkI/O/(No prescaling)
 56a:	83 b7       	in	r24, 0x33	; 51
 56c:	81 60       	ori	r24, 0x01	; 1
 56e:	83 bf       	out	0x33, r24	; 51
	
	unsigned int overflowCounter = 0 ;
 570:	20 e0       	ldi	r18, 0x00	; 0
 572:	30 e0       	ldi	r19, 0x00	; 0
	
	while (overflowCounter<20000)
 574:	0c c0       	rjmp	.+24     	; 0x58e <delay_5_sec+0x24>
	{
		// wile be repeated 2000 times
		
		//wait until the overflow flag to be set
		while ((TIFR & (1<<0)) == 0 );
 576:	08 b6       	in	r0, 0x38	; 56
 578:	00 fe       	sbrs	r0, 0
 57a:	fd cf       	rjmp	.-6      	; 0x576 <delay_5_sec+0xc>
		
		//clear the overflow flag
		TIFR |=  (1<<0);
 57c:	88 b7       	in	r24, 0x38	; 56
 57e:	81 60       	ori	r24, 0x01	; 1
 580:	88 bf       	out	0x38, r24	; 56
		
		if (Pedestrian_mode== 1) {break;}
 582:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <Pedestrian_mode>
 586:	81 30       	cpi	r24, 0x01	; 1
 588:	31 f0       	breq	.+12     	; 0x596 <delay_5_sec+0x2c>
		
		overflowCounter++;
 58a:	2f 5f       	subi	r18, 0xFF	; 255
 58c:	3f 4f       	sbci	r19, 0xFF	; 255
	
	TCCR0 |= (1<<0);  // clkI/O/(No prescaling)
	
	unsigned int overflowCounter = 0 ;
	
	while (overflowCounter<20000)
 58e:	20 32       	cpi	r18, 0x20	; 32
 590:	8e e4       	ldi	r24, 0x4E	; 78
 592:	38 07       	cpc	r19, r24
 594:	80 f3       	brcs	.-32     	; 0x576 <delay_5_sec+0xc>
		
		overflowCounter++;
	}
	
	//timer stop
	TCCR0 = 0x00;
 596:	13 be       	out	0x33, r1	; 51
 598:	08 95       	ret

0000059a <_exit>:
 59a:	f8 94       	cli

0000059c <__stop_program>:
 59c:	ff cf       	rjmp	.-2      	; 0x59c <__stop_program>
